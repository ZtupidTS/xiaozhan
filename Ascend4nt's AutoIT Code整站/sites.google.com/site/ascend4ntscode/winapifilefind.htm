<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><!-- saved from url=(0058)http://sites.google.com/site/ascend4ntscode/winapifilefind -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { // Input 0
var a=window;
// Input 1
var b="start";function d(f){this.t={};this.tick=function(g,h,c){c=c?c:(new Date).getTime();this.t[g]=[c,h]};this.tick(b,null,f)}var e=new d;a.jstiming={Timer:d,load:e};try{var i=null;if(a.chrome&&a.chrome.csi)i=Math.floor(a.chrome.csi().pageT);if(i==null)if(a.gtbExternal)i=a.gtbExternal.pageT();if(i==null)if(a.external)i=a.external.pageT;if(i)a.jstiming.pt=i}catch(j){};
// Input 2
})()
</script>
<link rel="shortcut icon" href="../../../www.gstatic.com/sites/p/8c5068/system/app/images/favicon.ico" type="image/x-icon" />
<link rel="apple-touch-icon" href="../../../www.gstatic.com/sites/p/8c5068/system/app/images/apple-touch-icon.png" type="image/png" />
<script type="text/javascript">/* Copyright 2008 Google. */ (function() { var e=parseInt,h=window,i="length";function j(a){return document.getElementById(a)}h.byId=j;var k="";function l(a){return a.replace(/^\s+|\s+$/g,k)}h.trim=l;
var m="MSIE",n="6.0",o="string",p='id="',q='" ',r='class="',s='title="',t="display:inline-block;",u="left",v="float:left;",w="right",x="float:right;",y="cursor:hand;",z="<span ",A=' style="width:',B="px; height:",C="px;",D=";padding: 0;filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='",E="', sizingMethod='scale');\"></span><span style=\"padding: ",F=" ",G=";",H="float:",I='"></span>';
h.ie6ImgFix=function(a){var b=h.navigator?navigator.userAgent:k;if(b.indexOf(m)!=-1&&typeof opera=="undefined"){var d=/MSIE\s+([^\);]+)(\)|;)/;d.test(b);b=RegExp.$1;if(b==n){var c=typeof a==o?j(a):a;a=c.id?p+c.id+q:k;b=c.className?r+c.className+q:k;d=c.title?s+c.title+q:s+c.alt+q;var f=t+c.style.cssText;if(c.align==u)f=v+f;if(c.align==w)f=x+f;if(c.parentElement.href)f=y+f;var g=c.currentStyle,L=c.width-e(g.paddingLeft,10)-e(g.paddingRight,10),M=c.height-e(g.paddingTop,10)-e(g.paddingBottom,10),N=
z+a+b+d+A+L+B+M+C+f+D+c.src+E+g.paddingTop+F+g.paddingRight+F+g.paddingBottom+F+g.paddingLeft+G+(g.styleFloat?H+g.styleFloat+G:k)+I;h.setTimeout(function(){c.outerHTML=N},1)}}};var J=[],K=0;h.JOT_addListener=function(a,b,d){var c=new String(K++);a={eventName:a,handler:b,compId:d,key:c};J.push(a);return c};h.JOT_removeListenerByKey=function(a){for(var b=0;b<J[i];b++)if(J[b].key==a){J.splice(b,1);break}};
h.JOT_removeAllListenersForName=function(a){for(var b=0;b<J[i];b++)J[b].eventName==a&&J.splice(b,1)};var O="function";h.JOT_postEvent=function(a,b,d){var c={eventName:a,eventSrc:b||{},payload:d||{}};if(h.JOT_fullyLoaded){b=J[i];for(d=0;d<b&&d<J[i];d++){var f=J[d];if(f&&f.eventName==a){c.listenerCompId=f.compId||k;(f=typeof f.handler==O?f.handler:h[f.handler])&&f(c)}}}else h.JOT_delayedEvents.push({eventName:a,eventSrc:b,payload:d})};h.JOT_delayedEvents=[];h.JOT_fullyLoaded=false;var P="__duration__";
h.JOT_formatRelativeToNow=function(a,b){a=((new Date).getTime()-a)/6E4;if(a>=1440||a<0)return null;var d=0;if(a>=60){a/=60;d=2}a>=2&&d++;return b?h.JOT_siteRelTimeStrs[d].replace(P,Math.floor(a)):h.JOT_userRelTimeStrs[d].replace(P,Math.floor(a))}; })()
</script>
<script>


var webspace = {"signInUrl":"../../../https@www.google.com\a\universallogin@continue=http_253a_252f_252fsites.google.com_252fsite_252fascend4ntscode_252fwinapifilefind&service=jotspot","isGaiaBarRendered":true,"isConsumer":true,"termsUrl":"../../../www.google.com/sites/help/intl/en/terms.html","enableAnalytics":true,"homePath":"/","sharingPolicy":"OPENED","isAdsenseEnabled":true,"analyticsAccountId":"UA-10188299-2","baseUri":"default.htm","name":"ascend4ntscode","features":{"lazySiteHierarchy":true,"subpageNav":false,"multipleCalendar":true,"enableNewBrowserEditChecks":true,"useStandardEmbedsInSidebar":false,"experimental":{"displayEditorLockExceptions":false},"navadminperf":false,"structuredDataSchemas":false,"kixEmbedSupport":true},"domain":"defaultdomain","adsensePublisherId":null,"isStartPageEnabled":false,"domainAnalyticsAccountId":"","siteTitle":"Ascend4nt's AutoIT Code"};


webspace.gadgets = {"isGadgetDirectoryEnabled":true,"baseUri":"system/app/pages/gadgets","isGgsRenderingEnabled":true};


webspace.user = {"uid":"","hasAdminAccess":false,"guest_":true,"domain":"","hasWriteAccess":false,"userName":"guest","dasherUser":false,"primaryEmail":"guest","displayNameOrEmail":"guest"};

webspace.page = {"canDeleteWebspace":null,"locale":"en","state":"","wuid":"wuid:gx:792ed10785ac95ef","timeZone":"Asia/Hong_Kong","properties":{},"type":"text","canChangePath":true,"parentWuid":null,"revision":10,"title":"_WinAPI_FileFind","isRtlLocale":false,"bidiEnabled":false,"siteLocale":"en","name":"winapifilefind","path":"../../winapifilefind","isSiteRtlLocale":false,"parentPath":null};


var editorResources = [
  '../../../www.gstatic.com/sites/p/8c5068/system/js/trog_edit__en.js',
  '../../../www.gstatic.com/sites/p/8c5068/system/app/css/trogedit.css',
  '_/rsrc/1270056436515/system/app/css/editor.css'
];

var JOT_clearDotPath = '../../../www.gstatic.com/sites/p/8c5068/system/app/images/cleardot.gif';


var JOT_userRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];


webspace.page.currentTemplate = {"title":"Web Page","path":"../../system/app/pagetemplates/text"};





var JOT_siteRelTimeStrs = ["a minute ago","__duration__ minutes ago","an hour ago","__duration__ hours ago"];

</script>
<script type="text/javascript">
                window.jstiming.load.tick('scl');
              </script>
<meta name="Description" content="My AutoIT code source" />
<style type="text/css">#body .goog-menuitem .sites-moreactions-icon {
margin-top: 0;
}

/* Not sure exactly why, but I found that in the presence of position: relative
(css) we need to trigger IE's internal, proprietary "hasLayout" mode in order
to render correctly.  This is for all the zoom: 1 (css) in the file. */
#body #sites-page-toolbar {
zoom: 1;
position: relative;
}

/* (midoringo) fixes b1471374 rule for toolbar to show correctly in RTL for IE6 */
/* Don't know what exactly this fix the problem. */
#sites-page-toolbar #sites-page-info-bar {
/* position: static; */
zoom: 1;
}

/* rule for toolbar's border-bottom to show correctly in RTL for IE6 */
#sites-collaborator-bar{
position: relative;
}

#sites-searchbox-search-button{
height: 21px;
}

#sites-searchbox-select-button-wrapper{
height: 21px;
}

#body .sites-attachment-icon,
#body .sites-comment-icon {
font-size: 1px !important;
}

/* trigger layout, otherwise the bgcolor on the comments area only fills to halfway down */
#body #sites-comment-wrapper,
#body #sites-attachment-wrapper {
zoom: 1;
}

#body .sites-button-icon {
margin-right: 5px;
}

/* (midoringo) This fixes bug 1867401, seems like position: static fixes some */
/* IE RTL problem, but I don't know how exactly this fix the problem. */
#body .modal-dialog-title {
/* position: static; */
zoom: 1;
}

#body .modal-dialog-content {
height: 1%;
}

#body .goog-sites-pagefinder hr {
clear: both;
}

#body .goog-sites-pagefinder .goog-tabpane {
height: 225px;
}

#body .modal-dialog .goog-ws-logo {
width: 400px;
}

#body .goog-button-base {
margin-left: 2px;
margin-right: 2px;
}

#body .sites-filecab-icon-delete {
height: 20px;
background-position: 0 2px;
}

#body .sites-filecab-icon-folder {
height: 20px;
background-position: 0 2px;
}

#body .sites-filecab-icon-new {
height: 20px;
background-position: 0 2px;
}

#body .sites-toolbar-icon-new {
height: 20px;
background-position: 0 2px;
}

#body .sites-toolbar-icon-edit {
height: 20px;
background-position: -13px 2px;
}

#body .sites-toolbar-icon-more-actions {
height: 20px;
margin: 0;
}

#body .sites-format-menu {
/* IE 6 hack - otherwise it renders the menu at 100% screen width for some
reason */
_width: 20em;
}

.sites-format-menu .goog-menuitem-rtl {
width: 150px;
}

.sites-menu-insert .goog-menuitem-rtl{
width: 200px;
}

.sites-format-submenu .goog-menuitem-rtl {
width: 60px;
}

.sites-insert-submenu .goog-menuitem-rtl{
width: 100px;
}

.sites-menu-layout .goog-menuitem-rtl{
width: 15em;
}

/* This is fix for bug 1891361 in the IE6 portion, This allows the icon in the
MenuItem to display correctly on the right side. */
#body .goog-toolbar-menu-item-icon {
_position: static;
}

#body .announcements .announcement .postfooter p {
margin: 0;
padding: 0 0 15px;
}

#body .filecabinet .filecabinet-table {
border-collapse: collapse;
}

#body .announcements {
zoom: 1;
}

/* Fix for bug 1902901, parts of the list page are rendered off screen for
IE RTL.  This fixes the position: relative used by the layout */
#body .sites-list-showing-items,
#body #sites-list-controls,
#body .list-page {
zoom: 1;
}

/* Fix for bug 1902397, float right causes text to shift out of bound of the
containing <a> */
#body .sites-list-sort-button {
float: none;
}

#addPageElementEl .goog-ws-add {
margin-right: 12px;
}

#body .lp-createpage-tree {
height: 202px;
}

.sitelayout-dlg-img-container {
zoom: 1;
}

.sites-sidebar-nav li {
zoom: 1;
}

.nav-toc-content li {
zoom: 1;
}

td.sites-copy-cell-name {
padding: 6px 10px 0 10px;
}

td.sites-copy-cell {
padding-top: 6px;
}

/*hack to fix the collaborator bar gradient for ie */
#sites-page-toolbar {
position: relative;
z-index: 101;
}


/* Both IE6 and IE7 look at the css rule border-bottom-width: 0 and use
* width: 1px instead... fortunately IE7 knows what border-color: transparent
* means, so it doesn't have ugly border allover.  This rule targets nav in IE6
* and set border-width to 0px to get rid of the problem.
*/
#body .sites-sidebar-nav li,
#body .sites-sidebar-nav div,
#body .sites-sidebar-nav a {
_border-bottom-width: 0px !important;
}

.sites-clear {
zoom: 1;        /* triggers hasLayout */
display: block; /* resets display for IE/Win */
}
</style>
<link rel="stylesheet" type="text/css" href="../../../www.gstatic.com/sites/p/8c5068/system/app/themes/slate/standard-css-slate-ltr-ltr.css" />
<link rel="stylesheet" type="text/css" href="_/rsrc/1270056436557/system/app/css/overlay.css@cb=slate170goog-ws-left.css" />
<title>_WinAPI_FileFind (Ascend4nt's AutoIT Code)</title>
<script type="text/javascript">
                window.jstiming.load.tick('cl');
              </script>
</head>

<body xmlns="http://www.google.com/ns/jotspot" id="body" class=" en">
<div id="sites-page-toolbar">
<div id="sites-status" class="sites-status" style="display:none;">
<div id="sites-notice" class="sites-notice"> </div>
</div>
</div>
<div id="sites-chrome-everything" style="direction: ltr">
<div id="sites-chrome-page-wrapper">
<div id="sites-chrome-page-wrapper-inside">
<div xmlns="http://www.w3.org/1999/xhtml" id="sites-chrome-header-wrapper">
<table id="sites-chrome-header" class="sites-layout-hbox" cellspacing="0">
<tr class="sites-header-primary-row">
<td id="sites-header-title">
<h2><a href="default.htm" dir="ltr">Ascend4nt's AutoIT Code</a></h2>
</td>
<td class="sites-layout-searchbox">
<div>
<form id="sites-searchbox-form" action="/site/ascend4ntscode/system/app/pages/search">
<input type="text" onpropertychange="JOT_setTextDir(this)" oninput="JOT_setTextDir(this)" dir="" id="jot-ui-searchInput" name="q" size="20" />
<input type="hidden" id="sites-searchbox-scope" name="scope" value="search-site" />
<div class="goog-inline-block goog-button goog-button-base   "><div class="goog-inline-block goog-button-base-outer-box"><div class="goog-inline-block goog-button-base-inner-box"><div class="goog-button-base-pos"><div class="goog-button-base-top-shadow"> </div><div id="sites-searchbox-search-button" class="goog-button-base-content " style="" onclick=""><span id="sites-searchbox-search-button-label">Search this site</span></div></div></div></div></div>
</form>
</div>
</td>
</tr>
</table> 
</div> 
<div id="sites-chrome-main-wrapper">
<div id="sites-chrome-main-wrapper-inside">
<table id="sites-chrome-main" class="sites-layout-hbox" cellspacing="0">
<tr>
<td id="sites-chrome-sidebar-left" class="sites-layout-sidebar-left">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_2bd" class="sites-embed">
<div class="sites-embed-content sites-sidebar-nav ">
<ul jotId="navList">
<li class="topLevel nav-first"><div dir="ltr" style="padding-left: 19px;"><a href="home/default.htm" jotId="wuid:gx:3e0bfbf64d02f7bd" class="topLevel">Ascend4nt's AutoIT Code</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="arraysortindirect.htm" jotId="wuid:gx:33225ec9cbebefd0" class="topLevel">_ArraySortIndirect</a>
</div></li>
<li class="topLevel parent" wuid="gx:7367f77e4722ca7c"><div dir="ltr" style="padding-left: 0px;"><div class="expander"></div><a href="clipgethtml/default.htm" jotId="wuid:gx:7367f77e4722ca7c" class="topLevel">_ClipGetHTML</a>
</div><ul>
<li class=""><div dir="ltr" style="padding-left: 38px;"><a href="clipgethtml/htmlclipboardmonitor.htm" jotId="wuid:gx:31ba070512d79f64">HTMLClipboardMonitor</a>
</div></li>
</ul>
</li>
<li class="topLevel parent" wuid="gx:6b71d77e5da91118"><div dir="ltr" style="padding-left: 0px;"><div class="expander"></div><a href="clipputhtml/default.htm" jotId="wuid:gx:6b71d77e5da91118" class="topLevel">_ClipPutHTML</a>
</div><ul>
<li class=""><div dir="ltr" style="padding-left: 38px;"><a href="clipputhtml/hyperlinkputexample.htm" jotId="wuid:gx:1b03857ed9607985">HyperLinkPutExample</a>
</div></li>
<li class=""><div dir="ltr" style="padding-left: 38px;"><a href="clipputhtml/puthtmlexample.htm" jotId="wuid:gx:2a5ec4491a7f4d49">PutHTMLExample</a>
</div></li>
</ul>
</li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="clipputhyperlink.htm" jotId="wuid:gx:18588c2947597699" class="topLevel">_ClipPutHyperlink</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="home/crosshairs.htm" jotId="wuid:gx:17790663940aaf0f" class="topLevel">CrossHairs (Full-Screen)</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="dllstructdisplay.htm" jotId="wuid:gx:6f676835b2fa48d8" class="topLevel">_DLLStructDisplay</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="doswildcardstopcregex.htm" jotId="wuid:gx:770f1b424276600e" class="topLevel">_DOSWildcardsToPCRegEx</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="enumchildwindows.htm" jotId="wuid:gx:1a0c75e23eda41b7" class="topLevel">_EnumChildWindows</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="guibox.htm" jotId="wuid:gx:62a67732b3c60a79" class="topLevel">_GUIBox</a>
</div></li>
<li class="topLevel"><div class="current-bg" jotId="wuid:gx:792ed10785ac95ef" dir="ltr" style="padding-left: 19px;">_WinAPI_FileFind
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="winapi_getsysteminfo.htm" jotId="wuid:gx:593d5f86aa661489" class="topLevel">_WinAPI_GetSystemInfo</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="winapi_processgetcreatetime.htm" jotId="wuid:gx:7d305b7e7335ec2a" class="topLevel">_WinAPI_ProcessGetCreateTime</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="winapi_processgetfilename.htm" jotId="wuid:gx:5cb01b89736c55ff" class="topLevel">_WinAPI_ProcessGetFileName</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="winapi_processgetpathname.htm" jotId="wuid:gx:87dbf73f0c12f0c" class="topLevel">_WinAPI_ProcessGetPathname</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="wingetalttabwinlist.htm" jotId="wuid:gx:54b9169eaaceb1e6" class="topLevel">_WinGetAltTabWinList</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="fullscreencrashrecovery.htm" jotId="wuid:gx:782a3c1a874782e3" class="topLevel">FullScreenCrashRecovery</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="contactme.htm" jotId="wuid:gx:35605b72df1045cc" class="topLevel">ContactMe</a>
</div></li>
<li class="topLevel"><div dir="ltr" style="padding-left: 19px;"><a href="system/app/pages/sitemap/hierarchy.htm" jotId="wuid:gx:56fda1e8e732580a" class="topLevel">Sitemap</a>
</div></li>
</ul>

</div>
</div>
</td>
<td id="sites-canvas-wrapper">
<div id="sites-canvas">
<div id="goog-ws-editor-toolbar-container"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="title-crumbs" style="">
</div>
<h3 xmlns="http://www.w3.org/1999/xhtml" id="sites-page-title-header" style="" align="left">
<span id="sites-page-title" dir="ltr">_WinAPI_FileFind</span>
</h3>

<div id="sites-canvas-main" class="sites-canvas-main">
<div id="sites-canvas-main-content">
<table xmlns="http://www.w3.org/1999/xhtml" cellspacing="0" class="sites-layout-name-one-column sites-layout-hbox"><tbody><tr><td class="sites-layout-tile sites-tile-name-content-1"><div dir="ltr">Since it's always bugged me that the AutoIT implementation of 'FindFirstFile' 
and 'FindNextFile' only returned filenames and that extra calls had to be made 
to get file-size, attributes, short-names, and date/time of file 
creation,last-access, &amp; last-modification which severely increased the 
amount of time it took to properly analyze the contents of a folder and it's 
files, I decided to create an alternative.<br />
<br />
This uses the same Windows 
calls (I assume) as AutoIT, except it returns all the information it rightfully 
should for each file found - including:<br />
<b>-File 
attributes</b> (in numerical, not a silly string format)<br />
<b>- Creation Time<br />
- Last-Access Time<br />
- Last-Write Time<br />
- 
FileSize<br />
- Filename</b> (obviously)<br />
<b>- 8.3 short 
name</b> (if it is 1. different from the regular Filename and 2. if 
short-names haven't been turned off<br />
<br />
Now, the calling process is a little 
different, though for the most part not much is required to be altered in 
existing code. Basically, the attributes-check for folders is a numerical test, 
and when a folder is found, you *need* to test for '.' and '..' navigation 
(fake) folders. Also, the 'While' loop changes into a 'Do-Until' 
loop.<br />
<br />
Also, to convert the time into a readable format, you'll need to 
pass the array to the _WinAPI_FileFindTimeConvert() function (which in turn 
saves a bit of annoyance in calling the _WinAPI_FileTimeConvert() function). 
Also, all calls are done via an array, though it is by reference, so it saves a 
lot of data passing.<br />
<br />
The main purpose of this function, for me at least, 
was to get all the information for files/folders on a specific drive, to either 
compare or copy them to other files/folders on another drive. Note that the 
times do not need to be converted in this case, you simply need to compare the 
date/time array elements [8] and [9] to the other file's date/time elements, in 
addition to of course, file-size. (and if those don't match up, then a good ol' 
File compare (fc.exe) command can come in handy)..<br />
<br />
Below are two pieces 
of code - 1st the UDF, 2nd the test (at "- START -"). Note that the test does not perform *all* 
date/time conversions, but regardless I've found the WinAPI code to be faster 
ALWAYS than the FileFind()+attribute functions. If, however, you ONLY need filenames, its generally better to go with the built-in searches, though I doubt my code will slow things down very much.<br />
<br />
Hope you can understand by the code. Let me know otherwise, and if 
in testing you find any faults.<br />
<br />
NOTE: The 'example' code included in the main code below  can be gotten rid of by just deleting from the  "- START -" section on.  Also note that Windows will buffer disk accesses and therefore botch any direct compares, UNLESS the system is restarted before each file 'search' run.<br />
 HOWEVER, the way I coded things below, you'll notice that even with buffering, the AutoIT loop is slower when there's a need to grab attributes information.<br />
<br />
EDIT: 
Updated for AutoIT v3.3 support (or 3.2.12.1 UNICODE-only)<br />
<br />
<br />
<b style="color:rgb(180, 95, 6)"><font size="3">Ascend4nt's AutoIT Code License agreement:</font></b><br />
<b><i>
</i></b><i>While I provide this source code freely, if you do use the code in your projects, all I ask is that:</i><br />
<ol><li>
 If you provide source, keep the header as I have put it, OR, if you
expand it, then at least acknowledge me as the original author, and any other authors I credit<br />
</li><li>
 If the program is released, acknowledge me in your credits (it
doesn't have to state which functions came from me, though  again if
the source is provided - see #1)</li><li>The source <u>on it's own</u> (as opposed to part of a <i>project</i>) can <i>not</i> be posted unless a link to the page(s) where the code were retrieved from is provided and a message stating that the latest updates will be available on the page(s) linked to.</li><li>Pieces of the code can however be discussed on the threads where 
Ascend4nt has posted the code without worrying about further linking.</li></ol><br />
<font size="5" style="color:rgb(56, 118, 29)">- _WinAPIFileFind.au3 CODE STARTS HERE -</font><br />
<br />
#include-once<br />
<br />
; ===================================================================================================<br />
; &lt;_WinAPI_FileFind.au3&gt;<br />
;<br />
; Direct Windows API FindFirst/Next File DLL calls for the purpose of getting additional information<br />
;   not found in FileFindFirst/NextFile() calls (these calls would need to be added to get the same<br />
;       information: (FileGetAttrib(),FileGetTime(),FileGetSize()) -&gt; all adding additional overhead<br />
;<br />
; Functions:<br />
;   _WinAPI_FileFindFirstFile()<br />
;   _WinAPI_FileFindNextFile()<br />
;   _WinAPI_FileFindClose()<br />
;   _WinAPI_FileFindTimeConvert()<br />
;<br />
; Internal Functions:<br />
;   _WinAPI_FileTimeConvert()   ; Called by _WinAPI_FileFindTimeConvert()<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
<br />
; ===================================================================================================<br />
; _WinAPI_FileFind *Attribute* bits:<br />
; ===================================================================================================<br />
; 1  [0x1]  = Read Only Attribute<br />
; 2  [0x2]  = Hidden Attribute<br />
; 4  [0x4]  = System Attribute<br />
; 16 [0x10] = Directory Attribute (it is a folder, not a file)<br />
; 32 [0x20] = Archive Attribute<br />
;<br />
; - less-commonly used attributes -<br />
;<br />
; 64    [0x40]   = Device ('RESERVED - Do Not Use')<br />
; 128   [0x80]   = NORMAL Attribute (no other attributes set)<br />
; 256   [0x100]  = Temporary file (for temporary use)<br />
; 512   [0x200]  = Sparse file type (?)<br />
; 1024  [0x400]  = File or Directory has an associated reparse (?) point<br />
; 2048  [0x800]  = Compressed file or folder<br />
; 4096  [0x1000] = Offline status (file data moved to offline storage)<br />
; 8192  [0x2000] = File is not to be content-indexed<br />
; 16834 [0x4000] = Encryption attribute (file/folder is encrypted)<br />
; 32768 xx NOT USED xx<br />
; 65536 [0x10000] = Virtual file (?)<br />
; ===================================================================================================<br />
<br />
; ===================================================================================================<br />
; Global structure to cut down on DLLStruct creation<br />
; ===================================================================================================<br />
<br />
Global $_st_INT_FileFindInfo,$_i_INT_FileFindHandleCount=0<br />
<br />
; ===================================================================================================<br />
; Func _WinAPI_FileFindFirstFile($sSearchString,$DLL=-1)<br />
;<br />
; $sSearchString = pathname + filesearch parameters (ex: C:\windows\system32\*.dll)<br />
;<br />
; Returns:<br />
;   Success: an array containing the 1st find and file handle. (see below for Array format)<br />
;   Failure: -1 with @error set:<br />
;       @error = 1 = invalid parameter<br />
;       @error = 2 = path length to big<br />
;       @error = 3 = DLL call fail<br />
;<br />
; Format of array passed (on success) [1st 4 will be programmer's concern, date/time is accessed an easier way]<br />
;   $array[0] = File Name<br />
;   $array[1] = 8.3 Alternate Short File name<br />
;   $array[2] = File Attributes<br />
;   $array[3] = File Size (64-bits), ~ 9 exabytes max (~ 9,000 terabytes)<br />
;   $array[4] = File Creation time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[5] =   File Creation time Hi (32-bits)<br />
;   $array[6] = File Last Access time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[7] =   File Last Access Time Hi (32-bits)<br />
;   $array[8] = File Last Write time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[9] =   File Last Write time Hi (32-bits)<br />
;   $array[10] = File-Find Handle [Internal Use]<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
<br />
Func _WinAPI_FileFindFirstFile($sSearchString,$DLL=-1)<br />
    If Not IsString($sSearchString) Then Return SetError(1,0,-1)<br />
    Local $aRet,$iSearchLen=StringLen($sSearchString)<br />
    <br />
    ; File length special op for Unicode paths&gt;259<br />
    If $iSearchLen&gt;259 Then<br />
        If $iSearchLen&gt;(32766-4) Then Return SetError(2,0,-1)<br />
        $sSearchString='\\?\' &amp; $sSearchString<br />
    EndIf       <br />
<br />
    Local $stPathStruct=DllStructCreate("wchar["&amp;($iSearchLen+1)&amp;"]")<br />
    DllStructSetData($stPathStruct,1,$sSearchString)<br />
    <br />
    ; Create WIN32_FIND_DATA structure If no other open find-file handles.<br />
    ;   We avoid recreating the DLL structure for each call (and hopefully successive recursive find calls)<br />
    ;   to cut down on time (noticeable as file\folders approach tens of thousands)<br />
    If Not $_i_INT_FileFindHandleCount Then _<br />
        $_st_INT_FileFindInfo=DllStructCreate("dword;dword[2];dword[2];dword[2];dword;dword;dword;dword;wchar[260];wchar[14]")<br />
        <br />
    ; Make the call, and fill the $_st_INT_FileFindInfo structure<br />
    If $DLL==-1 Then $DLL="Kernel32.dll"<br />
<br />
    $aRet=DllCall($DLL,"ptr","FindFirstFileW","ptr",DllStructGetPtr($stPathStruct),"ptr",DllStructGetPtr($_st_INT_FileFindInfo))<br />
    If @error Or Not IsArray($aRet) Or $aRet[0]==-1 Then Return SetError(3,0,-1)<br />
    ; Success<br />
    <br />
    ; Increase find-file handle count<br />
    $_i_INT_FileFindHandleCount+=1<br />
    <br />
    Local $aReturnArray[11]<br />
    ; Set the Find-File handle<br />
    $aReturnArray[10]= $aRet[0]<br />
    ; Copy file-name<br />
    $aReturnArray[0] = DllStructGetData($_st_INT_FileFindInfo,9)<br />
    ; Copy 8.3 short-name if it exists<br />
    $aReturnArray[1] = DllStructGetData($_st_INT_FileFindInfo,10)<br />
    ; Copy file attributes element<br />
    $aReturnArray[2] = DllStructGetData($_st_INT_FileFindInfo,1)    <br />
    ; Combine two dwords together to get full filesize (64bit value - supported in AutoIT x32 (shouldn't exceed ~ 9 EXAbytes)<br />
    $aReturnArray[3] = (DllStructGetData($_st_INT_FileFindInfo,5)*4294967296) + DllStructGetData($_st_INT_FileFindInfo,6)<br />
    ; File Creation Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aReturnArray[4] = DllStructGetData($_st_INT_FileFindInfo,2,1)<br />
    $aReturnArray[5] = DllStructGetData($_st_INT_FileFindInfo,2,2)<br />
    ; File Last-Access Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aReturnArray[6] = DllStructGetData($_st_INT_FileFindInfo,3,1)  <br />
    $aReturnArray[7] = DllStructGetData($_st_INT_FileFindInfo,3,2)  <br />
    ; File Last-Write Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aReturnArray[8] = DllStructGetData($_st_INT_FileFindInfo,4,1)<br />
    $aReturnArray[9] = DllStructGetData($_st_INT_FileFindInfo,4,2)<br />
    <br />
    ; Return file-find array<br />
    Return $aReturnArray<br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; Func _WinAPI_FileFindNextFile(ByRef $aFileFindArray,$DLL=-1)<br />
;<br />
; $aFileFindArray = array received from a call to _WinAPI_FileFindFirstFile(). It will pull out the handle itself.<br />
; $DLL = DLL handle or -1<br />
;<br />
; Returns:<br />
;   Success: True, with the $aFileFindArray updated with the next found file information<br />
;   Failure: False with @error set:<br />
;       @error = 0 = last file<br />
;       @error = 1 = invalid parameter<br />
;       @error = 2 = DLL call failure<br />
;<br />
; Format of array passed (and modified on success) [1st 4 will be programmer's concern, date/time is accessed an easier way]<br />
;   $array[0] = File Name<br />
;   $array[1] = 8.3 Alternate Short File name<br />
;   $array[2] = File Attributes<br />
;   $array[3] = File Size (64-bits), ~ 9 exabytes max (~ 9,000 terabytes)<br />
;   $array[4] = File Creation time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[5] =   File Creation time Hi (32-bits)<br />
;   $array[6] = File Last Access time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[7] =   File Last Access Time Hi (32-bits)<br />
;   $array[8] = File Last Write time Lo (32-bits) - had to be split up unfortunately<br />
;   $array[9] =   File Last Write time Hi (32-bits)<br />
;   $array[10] = File-Find Handle [Internal Use]<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
<br />
Func _WinAPI_FileFindNextFile(ByRef $aFileFindArray,$DLL=-1)<br />
    If Not IsArray($aFileFindArray) Or Not $_i_INT_FileFindHandleCount Then Return SetError(1,0,False)<br />
<br />
    If $DLL==-1 Then $DLL="Kernel32.dll"<br />
    ; Make the next DLL call<br />
    Local $aRet=DllCall($DLL,"dword","FindNextFileW","ptr",$aFileFindArray[10],"ptr",DllStructGetPtr($_st_INT_FileFindInfo))<br />
    <br />
    If @error Or Not IsArray($aRet) Then Return SetError(2,0,False)<br />
<br />
    ; Last file? Then return False<br />
    If Not $aRet[0] Then Return False<br />
    <br />
    ; Call was successful. Set array<br />
    <br />
    ; File name<br />
    $aFileFindArray[0] = DllStructGetData($_st_INT_FileFindInfo,9)<br />
    ; 8.3 short name<br />
    $aFileFindArray[1] = DllStructGetData($_st_INT_FileFindInfo,10)<br />
    ; File Attribs<br />
    $aFileFindArray[2] = DllStructGetData($_st_INT_FileFindInfo,1)<br />
;~  ; Combine two dwords together to get full filesize (64bit value - supported in AutoIT x32 (shouldn't exceed ~ 9 EXAbytes)<br />
    $aFileFindArray[3] = (DllStructGetData($_st_INT_FileFindInfo,5)*4294967296) + DllStructGetData($_st_INT_FileFindInfo,6)<br />
    ; File Creation Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aFileFindArray[4] = DllStructGetData($_st_INT_FileFindInfo,2,1)<br />
    $aFileFindArray[5] = DllStructGetData($_st_INT_FileFindInfo,2,2)<br />
    ; File Last-Access Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aFileFindArray[6] = DllStructGetData($_st_INT_FileFindInfo,3,1)    <br />
    $aFileFindArray[7] = DllStructGetData($_st_INT_FileFindInfo,3,2)    <br />
    ; File Last-Write Time - Unfortunately these had to be split up despite 64-bit support (perhaps sign-bit was being touched)<br />
    $aFileFindArray[8] = DllStructGetData($_st_INT_FileFindInfo,4,1)<br />
    $aFileFindArray[9] = DllStructGetData($_st_INT_FileFindInfo,4,2)<br />
<br />
    Return SetError(0,0,True)   <br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; Func _WinAPI_FileFindClose(ByRef $aFileFindArray,$DLL=-1)<br />
;<br />
; Closes file handle received from _WinAPI_FileFindFirstFile()<br />
;<br />
; $aFileFindArray = array received from a call to _WinAPI_FileFindFirstFile(). It will pull out the handle itself.<br />
; $DLL = DLL handle or -1<br />
;<br />
; Returns: True if successful (with $aFileFindArray set to -1), or False if unsuccessful @error is set to:<br />
;   @error = 1 = invalid file handle<br />
;   @error = 2 = DLL call failure (or return of False)<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
Func _WinAPI_FileFindClose(ByRef $aFileFindArray,$DLL=-1)<br />
    If Not IsArray($aFileFindArray) Or Not $_i_INT_FileFindHandleCount Then Return SetError(1,0,False)<br />
<br />
    If $DLL==-1 Then $DLL="Kernel32.dll"<br />
    Local $aRet=DllCall($DLL,"dword","FindClose","ptr",$aFileFindArray[10])<br />
<br />
    ; Now look at error/return<br />
    If @error Or Not IsArray($aRet) Or Not $aRet[0] Then Return SetError(2,0,False)<br />
    <br />
    ; Success. Invalidate file-find array<br />
    $aFileFindArray=-1<br />
    ; Decrease find-file handle count<br />
    $_i_INT_FileFindHandleCount-=1<br />
    ; DLLStructDelete() if last open file find handle<br />
    If Not $_i_INT_FileFindHandleCount Then $_st_INT_FileFindInfo=0<br />
    <br />
    Return True<br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; Func _WinAPI_FileTimeConvert($iFileDateTimeLo,$iFileDateTimeHi,$DLL=-1)<br />
;<br />
; Internal method to Convert Date-Time double-dword values stored in Windows FILETIME structures<br />
;   NOTE: It *has* to be passed as two dwords, otherwise there are issues with 64-bit parameters.<br />
;<br />
; When used with _WinAPI_FileFind.. functions, the *PREFERRED* METHOD of calling this is:<br />
;   _WinAPI_FileFindTimeConvert()<br />
;<br />
; $iFileDateTimeLo = Lo word of date/time info returned in a the FILETIME structure<br />
; $iFileDateTimeHi = Hi word of date/time info returned in a FILETIME structure.<br />
; $DLL = DLL handle or -1<br />
;<br />
; Return:<br />
;   Success: formatted string : YYYYMMDDHHMMSS (24-hour clock)<br />
;   Failure: empty string, with @error=2 (DLL call fail)<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
<br />
Func _WinAPI_FileTimeConvert($iFileDateTimeLo,$iFileDateTimeHi,$DLL=-1)<br />
    Local $sDateTimeStr,$stLocalFileTime,$stFileTime,$stSystemTime,$aRet<br />
    ; FILETIME structures [DateTimeLo,DateTimeHi]<br />
    $stLocalFileTime=DllStructCreate("dword[2]")<br />
    $stFileTime=DllStructCreate("dword[2]")<br />
    ; SYSTEMTIME structure [Year,Month,DayOfWeek,Day,Hour,Min,Sec,Milliseconds]<br />
    $stSystemTime=DllStructCreate("ushort;ushort;ushort;ushort;ushort;ushort;ushort;ushort")<br />
    <br />
    If $DLL==-1 Then $DLL="Kernel32.dll"<br />
    ; Set the appropriate data members of the FileTime structure<br />
    DllStructSetData($stFileTime,1,$iFileDateTimeLo,1)<br />
    DllStructSetData($stFileTime,1,$iFileDateTimeHi,2)<br />
<br />
    ; First convert file time (UTC-based file time) to 'local file time'<br />
    $aRet=DllCall($DLL,"int","FileTimeToLocalFileTime","ptr",DllStructGetPtr($stFileTime),"ptr",DllStructGetPtr($stLocalFileTime))<br />
    If @error Or Not IsArray($aRet) Or Not $aRet[0] Then Return SetError(2,0,"")<br />
<br />
    ; Then convert file time to a system time structure<br />
    $aRet=DllCall($DLL,"int","FileTimeToSystemTime","ptr",DllStructGetPtr($stLocalFileTime),"ptr",DllStructGetPtr($stSystemTime))<br />
    If @error Or Not IsArray($aRet) Or Not $aRet[0] Then Return SetError(2,0,"")<br />
    <br />
    ; Now format it and return it in a string. Format: YYYYMMDDHHSSMM<br />
    $sDateTimeStr = DllStructGetData($stSystemTime,1) &amp; StringRight('0' &amp; DllStructGetData($stSystemTime,2),2) &amp; _<br />
        StringRight('0' &amp; DllStructGetData($stSystemTime,4),2) &amp; _<br />
        StringRight('0' &amp; DllStructGetData($stSystemTime,5),2) &amp; StringRight('0' &amp; DllStructGetData($stSystemTime,6),2) &amp; _<br />
        StringRight('0' &amp; DllStructGetData($stSystemTime,7),2)<br />
    <br />
    ; DLLStructDelete()'s<br />
    $stSystemTime=0<br />
    $stFileTime=0<br />
    $stLocalFileTime=0<br />
    <br />
    Return $sDateTimeStr<br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; Func _WinAPI_FileFindTimeConvert(Const ByRef $aFileFindArray,$iOption=0,$DLL=-1)<br />
;<br />
; Simple wrapper for _WinAPI_FileTimeConvert, uses same options as FileGetTime()<br />
;   (but works on $array's returned by _WinAPI_FileFindFirst/Next functions)<br />
;<br />
; $aFileFindArray = array returned by _WinAPI_FileFindFirst/Next function<br />
; $iOption = Type of date to convert [Same as FileGetTime()]:<br />
;   0 = Modified (default)<br />
;   1 = Created<br />
;   2 = Accessed<br />
; $DLL = DLL handle or -1<br />
;<br />
; Author: Ascend4nt<br />
; ===================================================================================================<br />
<br />
Func _WinAPI_FileFindTimeConvert(Const ByRef $aFileFindArray,$iOption=0,$DLL=-1)<br />
    Switch $iOption<br />
        ; File Created Time<br />
        Case 1<br />
            Return _WinAPI_FileTimeConvert($aFileFindArray[4],$aFileFindArray[5],$DLL)<br />
        ; File Last Accessed Time<br />
        Case 2<br />
            Return _WinAPI_FileTimeConvert($aFileFindArray[6],$aFileFindArray[7],$DLL)<br />
        ; Case 0, else - File Last Modified Time<br />
        Case Else<br />
            Return _WinAPI_FileTimeConvert($aFileFindArray[8],$aFileFindArray[9],$DLL)<br />
    EndSwitch<br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; Func _FileGetShortFilename($sPath)<br />
;<br />
; Simple function to return short filename from a full FileGetShortName() path, if one exists.<br />
; NOTE one difference: It will return "" if shortname matches longname (matching _WinAPI_FileFind results)<br />
; ===================================================================================================<br />
<br />
Func _FileGetShortFilename($sPath)<br />
    Local $sShortFilename,$sCurrentFilename=StringMid($sPath,StringInStr($sPath,'\',1,-1)+1)<br />
    $sPath=FileGetShortName($sPath)<br />
    $sShortFilename=StringMid($sPath,StringInStr($sPath,'\',1,-1)+1)<br />
    If $sCurrentFilename==$sShortFilename Then Return ""<br />
    Return $sShortFilename<br />
EndFunc<br />
<br />
; ===================================================================================================<br />
; - START -<br />
; ===================================================================================================<br />
<br />
Local $aFileFindArray,$iTotalCount=0,$iFolderCount=0,$iTimer,$hDLLHandle,$sFilename,$sAttrib,$hFindFileHandle<br />
Local $sFolder="C:\WINDOWS\system32\"<br />
Local $sSearchWildCard="*.*"<br />
<br />
; Test _WinAPI_FileFindFirst/Next Loop<br />
<br />
$iTimer=TimerInit()<br />
$hDLLHandle=DllOpen("Kernel32.dll")<br />
$aFileFindArray=_WinAPI_FileFindFirstFile($sFolder &amp; $sSearchWildCard,$hDLLHandle)<br />
If $aFileFindArray==-1 Then Exit<br />
<br />
Do<br />
    ; Check if it is a folder<br />
    If BitAND($aFileFindArray[2],16) Then<br />
        ; Necessary test with _WinAPI_FindFirst\NextFile() functions. Relative 'folders' need to be ignored:<br />
        If $aFileFindArray[0]=='.' Or $aFileFindArray[0]=='..' Then ContinueLoop<br />
        ; Increase found-folder count<br />
        $iFolderCount+=1<br />
    EndIf<br />
    ; Total file+folder count<br />
    $iTotalCount+=1<br />
    ; Filename:<br />
    ;   $aFileFindArray[0]<br />
    ; 8.3 Short Name [If 1. exists and 2. different from filename]<br />
    ;   $aFileFindArray[1]<br />
    ; Attributes:<br />
    ;   $aFileFindArray[2]<br />
    ; File Size:<br />
    ;   $aFileFindArray[3]<br />
    <br />
    ; [Converting File Date/Time to readable format (not necessary for *compares*)]<br />
    ; Creation Time:<br />
    ;   _WinAPI_FileFindTimeConvert($aFileFindArray,1,$hDLLHandle)<br />
    ; Last Access Time:<br />
    ;   _WinAPI_FileFindTimeConvert($aFileFindArray,2,$hDLLHandle)<br />
    ; Last Write Time:<br />
        _WinAPI_FileFindTimeConvert($aFileFindArray,0,$hDLLHandle)<br />
<br />
Until Not _WinAPI_FileFindNextFile($aFileFindArray,$hDLLHandle)<br />
_WinAPI_FileFindClose($aFileFindArray,$hDLLHandle)<br />
DllClose($hDLLHandle)<br />
<br />
ConsoleWrite("_WinAPI_FileFind Stats:" &amp; @CRLF &amp; _<br />
    "Total File count:" &amp; $iTotalCount-$iFolderCount &amp; ", Total Folder count:" &amp; $iFolderCount &amp; _<br />
    ", Time elapsed:" &amp; TimerDiff($iTimer) &amp; " ms" &amp; @CRLF)<br />
<br />
; Test Regular FileFindFirst/NextFile Loop<br />
<br />
$iTotalCount=0<br />
$iFolderCount=0<br />
$iTimer=TimerInit()<br />
$hFindFileHandle=FileFindFirstFile($sFolder &amp; $sSearchWildCard)<br />
While 1<br />
    $sFilename=FileFindNextFile($hFindFileHandle)<br />
    If @error Then ExitLoop<br />
<br />
    $sAttrib=FileGetAttrib($sFolder &amp; $sFilename)<br />
    <br />
    ; Check if file is a folder. If so, increase found-folder count:<br />
    If StringInStr($sAttrib,"D",0) Then $iFolderCount+=1<br />
    <br />
    ; Total file+folder count<br />
    $iTotalCount+=1 <br />
<br />
    ; Filename:<br />
    ;   $sFilename<br />
    ; 8.3 Short Name [If 1. exists and 2. different from filename]<br />
        _FileGetShortFilename($sFolder &amp; $sFilename)<br />
    ; Attributes:<br />
    ;   $sAttrib [FileGetAttrib($sFolder &amp; $sFilename)]<br />
    ; File Size:<br />
        FileGetSize($sFolder &amp; $sFilename)<br />
    <br />
    ; [Reading File Date/Time]<br />
    ; Creation Time:<br />
    ;   FileGetTime($sFolder &amp; $sFilename,1,1)<br />
    ; Last Access Time:<br />
    ;   FileGetTime($sFolder &amp; $sFilename,2,1)<br />
    ; Last Write Time:<br />
        FileGetTime($sFolder &amp; $sFilename,0,1)<br />
WEnd<br />
FileClose($hFindFileHandle)<br />
<br />
ConsoleWrite("FileFindFile Stats:" &amp; @CRLF &amp; _<br />
    "Total File count:" &amp; $iTotalCount-$iFolderCount &amp; ", Total Folder count:" &amp; $iFolderCount &amp; _<br />
    ", Time elapsed:" &amp; TimerDiff($iTimer) &amp; " ms" &amp; @CRLF)<br /><br /><font size="5" style="color:rgb(56, 118, 29)">- End Code -<br /><br /></font>
<a href="../../../www.webmasterapps.com/default.htm" rel="nofollow" style="border:medium none;margin:0px;padding:0pt" target="_blank"><img alt="Free Hit Counters" border="0" height="20" src="../../../www.no1freehitcounter.com/hcw3c/@id=nn%2biqjoswx23p1sbqhrdag_253d_253d" width="120" /></a>
</div></td></tr></tbody></table>
</div> 
</div> 
<div id="sites-canvas-bottom-panel">
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-subpages"> </div>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-attachments" style="display:none" class="sites-canvas-bottom-no-items">
<div id="sites-attachment-wrapper" class="sites-canvas-bottom-panel-wrapper">
<div jotId="sites-attachment-inner" style="display:none;" class="sites-attachment-inner">
<ul id="JOT_ATTACH_container">
</ul>
</div>
</div>
</div>
<a xmlns="http://www.w3.org/1999/xhtml" name="page-comments"></a>
<div xmlns="http://www.w3.org/1999/xhtml" id="COMP_page-comments" style="display:none;" class="sites-canvas-bottom-no-items">
<div id="sites-comment-wrapper" class="sites-canvas-bottom-panel-wrapper">
<div jotId="sites-comment-inner" style="display:none;" class="sites-comment-inner">
<div jotId="comments" class="sites-comments">
<div id="_wuid_" jotId="template" class="sites-comment" style="display:none">
<div><strong>_displayNameOrEmail_</strong> - _time_ - <a href="javascript:;" onClick="JOT_postEvent('removeComment', this, {wuid:'_wuid_'});">Remove</a></div>
<p dir="_dir_">_text_</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div> 
</td> 
</tr>
</table> 
</div> 
</div> 
<div id="sites-chrome-footer-wrapper">
<div id="sites-chrome-footer-wrapper-inside">
<div id="sites-chrome-footer">
<div xmlns="http://www.w3.org/1999/xhtml" class="sites-subfooter">
<p>
            
                 
                <a href="../../../https@www.google.com/a/universallogin@continue=http_253a_252f_252fsites.google.com_252fsite_252fascend4ntscode_252fwinapifilefind&service=jotspot" class="sites-system-link">Sign in</a>
              
            
                 
                <a href="system/app/pages/recentchanges.htm" rel="nofollow" class="sites-system-link">Recent Site Activity</a>
              
            
             
            <a href="javascript:void(window.open('../../../www.google.com/sites/help/intl/en/terms.html'))" class="sites-system-link">Terms</a>
             
            <a href="system/app/pages/reportabuse@src=_2fwinapifilefind" rel="nofollow" target="_blank" class="sites-system-link">Report Abuse</a>
            
                 
                <a href="javascript:;" onclick="window.open(webspace.printUrl)" class="sites-system-link">Print page</a>
              
            
            
             | 
            <b class="powered-by">Powered by <a href="../../default.htm">Google Sites</a></b>
</p>
</div>
</div>
</div>
</div>
</div> 
</div> 
</div> 

<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('sjl');
  </script>

<script xmlns="http://www.w3.org/1999/xhtml" src="../../../www.gstatic.com/sites/p/8c5068/system/js/jot_min_view__en.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
    window.jstiming.load.tick('jl');
  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
          var searchBox = new gsites.Searchbox('sites-searchbox-search-button');
          searchBox.initListeners();
          searchBox.setScopesMenu(webspace.page.isSiteRtlLocale);
        </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
            JOT_setupNav("2bd", "Navigation", false);
            JOT_addListener('titleChange', 'JOT_NAVIGATION_titleChange', 'COMP_2bd');
          </script>
<script xmlns="http://www.w3.org/1999/xhtml">
                    window.onload = function() {
                      var loadTimer = window.jstiming.load;
                      loadTimer.tick("ol");
                      loadTimer["name"] = "load," + webspace.page.type;
                      
                      window.jstiming.report(loadTimer);
                    }
                  </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript">
        JOT_insertAnalyticsCode(false);
      </script>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" defer="true">
  //<![CDATA[
    // Fires delayed events.
    (function() {
      JOT_fullyLoaded = true;
      var delayedEvents = JOT_delayedEvents;
      for (var x = 0; x < delayedEvents.length; x++) {
        var event = delayedEvents[x];
        JOT_postEvent(event.eventName, event.eventSrc, event.payload);
      }
      JOT_delayedEvents = null;
      JOT_postEvent('pageLoaded');
    })();

    // Decorate any fastUI buttons on the page with a class of 'goog-button'.
    if (webspace.user.hasWriteAccess) {
      JOT_decorateButtons();
    }
 //]]>
</script>
<div id="server-timer-div" style="display:none"> </div>
<script>
          window.jstiming.load.tick('render');
        </script>
</body>
</html>
